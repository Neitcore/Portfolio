from Tkinter import *
from math import *
class Conversion(Frame):
    def __init__(self):
        Frame.__init__(self)
        self.master.title('Conversion')
        self.grid()
        #//////////////////////////////////////// Block of titles ////////////////////////////////////////
        self._title1=Label(self, text='Conversion input')
        self._title1.grid(row=0,column=0)

        self._title1=Label(self, text='Amout to convert')
        self._title1.grid(row=0,column=1)

        self._title1=Label(self, text='Units')
        self._title1.grid(row=0,column=2)

        self._title1=Label(self, text='Result')
        self._title1.grid(row=0,column=3)

        self._title1=Label(self, text='Units of result')
        self._title1.grid(row=0,column=4)
        #//////////////////////////////////////// Errors ////////////////////////////////////////
        self._errortextbox= Label(self, text="Error Box")
        self._errortextbox.grid(row= 16, column=0)
        
        self._error= Label(self, text='', fg="red")
        self._error.grid(row=15, column=1)

        self._error2= Label(self, text='', fg="red")
        self._error2.grid(row=17, column=1)
        
        self._error3= Label(self, text='', fg="red")
        self._error3.grid(row=16, column=1)
        """
        

        self._error4= Label(self, text='', fg="red")
        self._error4.grid(row=18, column=1)

        self._error5= Label(self, text='', fg="red")
        self._error5.grid(row=19, column=1)

        self._error6= Label(self, text='', fg="red")
        self._error6.grid(row=20, column=1)
        """

        

        
        #//////////////////////////////////////// m/s to km/h ////////////////////////////////////////
        
        #Conversion input 
        self._input1= Label(self, text='m/s to km/h', fg="white", bg="black")
        self._input1.grid(row=1, column=0)
        
        #Amout to convert
        self.ms= DoubleVar()
        self.entry1= Entry(self, textvariable= self.ms, fg="white", bg="black")
        self.entry1.grid(row=1, column=1)
        
        #Units
        self.unit= Label(self, text='m/s', fg="white", bg="black")
        self.unit.grid(row=1, column=2)

        #Result
        self._result= Label(self, text= '0.0', fg="white", bg="black")
        self._result.grid(row=1, column=3)

        #Units of result
        self.resultUnit= Label(self, text='km/h', fg="white", bg="black")
        self.resultUnit.grid(row=1, column=4)
        
        #//////////////////////////////////////// km/h to m/s /////////////////////////////////////////

        #Conversion input
        self._input2= Label(self, text='km/h to m/s')
        self._input2.grid(row=2, column=0)
        #Amout to convert
        self.km=DoubleVar()
        self.entry2= Entry(self, textvariable= self.km)
        self.entry2.grid(row=2, column=1)
        
        #Units
        self.unit2= Label(self, text='km/h')
        self.unit2.grid(row=2, column=2)

        #Result
        self._result2= Label(self, text= '0.0')
        self._result2.grid(row=2, column=3)

        #Units of result
        self.resultUnit2= Label(self, text='m/s')
        self.resultUnit2.grid(row=2, column=4)
        
        #//////////////////////////////////////// Kinetic Energy ////////////////////////////////////////
        
        #Conversion input
        self._input1= Label(self, text='Kinetic Energy', fg="white", bg="black")

        self._input1.grid(row=3, column=0)

        #Amout to convert
        self.ms2= DoubleVar()
        self.entry3= Entry(self, textvariable= self.ms2, fg="white", bg="black")
        self.entry3.grid(row=3, column=1)
        
        self.kg= DoubleVar()
        self.entry3= Entry(self, textvariable= self.kg, fg="white", bg="black")
        self.entry3.grid(row=4, column=1)

        
        #Units
        self.unit3= Label(self, text='m/s', fg="white", bg="black")
        self.unit3.grid(row=3, column=2)
        self.unit3= Label(self, text='kg', fg="white", bg="black")
        self.unit3.grid(row=4, column=2)
        

        #Result
        self._result3= Label(self, text= '0.0', fg="white", bg="black")
        self._result3.grid(row=3, column=3)

        #Units of result
        self.resultUnit3= Label(self, text='J',fg="white", bg="black")
        self.resultUnit3.grid(row=3, column=4)
        
        #//////////////////////////////////////// Potential Energy ////////////////////////////////////////
        
        #Conversion input
        self._input1= Label(self, text='Potential Energy')
        self._input1.grid(row=6, column=0)

        #Amout to convert
        self.kg2= DoubleVar()
        self.entry3= Entry(self, textvariable= self.kg2)
        self.entry3.grid(row=6, column=1)
        
        self.msx2= DoubleVar()
        self.entry3= Entry(self, textvariable= self.msx2)
        self.entry3.grid(row=7, column=1)

        self.m= DoubleVar()
        self.entry3= Entry(self, textvariable= self.m)
        self.entry3.grid(row=8, column=1)

        #Units
        self.unit4= Label(self, text='kg')
        self.unit4.grid(row=6, column=2)

        self.unit4= Label(self, text='m/s^2')
        self.unit4.grid(row=7, column=2)

        self.unit4= Label(self, text='m')
        self.unit4.grid(row=8, column=2)

        #Result
        self._result4= Label(self, text= '0.0')
        self._result4.grid(row=6, column=3)

        #Units of result
        self.resultUnit4= Label(self, text='J')
        self.resultUnit4.grid(row=6, column=4)
        
        #//////////////////////////////////////// Escape Velocity ////////////////////////////////////////

        #Conversion input
        self._input1= Label(self, text='Escape Velocity', fg="white", bg="black")
        self._input1.grid(row=9, column=0)

        #Amout to convert
        self.MoP= DoubleVar()
        self.entry3= Entry(self, textvariable= self.MoP, fg="white", bg="black")
        self.entry3.grid(row=9, column=1)

        self.RoP= DoubleVar()
        self.entry3= Entry(self, textvariable= self.RoP, fg="white", bg="black")
        self.entry3.grid(row=10, column=1)

        
        


        #Units
        self.unit5= Label(self, text='kg', fg="white", bg="black")
        self.unit5.grid(row=9, column=2)
        self.unit5= Label(self, text='m', fg="white", bg="black")
        self.unit5.grid(row=10, column=2)
        

        #Result
        self._result5= Label(self, text= '0.0', fg="white", bg="black")
        self._result5.grid(row=9, column=3)
        self._result51= Label(self, text= '0.0', fg="white", bg="black")
        self._result51.grid(row=10, column=3)

        #Units of result
        self.resultUnit5= Label(self, text='m/s' ,fg="white", bg="black")
        self.resultUnit5.grid(row=9, column=4)

        self.resultUnit51= Label(self, text='m/s' ,fg="white", bg="black")
        self.resultUnit51.grid(row=10, column=4)
        
        #//////////////////////////////////////// Rotational Motion: m/s to rad/s ////////////////////////////////////////

        #Conversion input
        self._input1= Label(self, text='Rotational Motion: m/s to rad/s')
        self._input1.grid(row=11, column=0)

        #Amout to convert
        self.ms3= DoubleVar()
        self.entry3= Entry(self, textvariable= self.ms3)
        self.entry3.grid(row=11, column=1)

        self.m2= DoubleVar()
        self.entry3= Entry(self, textvariable= self.m2)
        self.entry3.grid(row=12, column=1)

        #Units
        self.unit6= Label(self, text='m/s')
        self.unit6.grid(row=11, column=2)
        self.unit61= Label(self, text='m')
        self.unit61.grid(row=12, column=2)

        #Result
        self._result6= Label(self, text= '0.0')
        self._result6.grid(row=11, column=3)

        self._result61= Label(self, text= '0.0')
        self._result61.grid(row=12, column=3)
        
        #Units of result
        self.resultUnit6= Label(self, text='m/s^2')
        self.resultUnit6.grid(row=11, column=4)
        self.resultUnit61= Label(self, text='rad/s')
        self.resultUnit61.grid(row=12, column=4)
        
        #//////////////////////////////////////// Rotational Motion: rad/s to m/s ////////////////////////////////////////

        #Conversion input
        self._input1= Label(self, text='Rotational Motion: rad/s to m/s', fg="white", bg="black")
        self._input1.grid(row=13, column=0)

        #Amout to convert
        self.rads= DoubleVar()
        self.entry3= Entry(self, textvariable= self.rads, fg="white", bg="black")
        self.entry3.grid(row=13, column=1)

        self.m3= DoubleVar()
        self.entry3= Entry(self, textvariable= self.m3, fg="white", bg="black")
        self.entry3.grid(row=14, column=1)

        #Units
        self.unit7= Label(self, text='rad/s', fg="white", bg="black")
        self.unit7.grid(row=13, column=2)
        self.unit71= Label(self, text='m', fg="white", bg="black")
        self.unit71.grid(row=14, column=2)

        #Result
        self._result7= Label(self, text= '0.0', fg="white", bg="black")
        self._result7.grid(row=13, column=3)
        self._result71= Label(self, text= '0.0', fg="white", bg="black")
        self._result71.grid(row=14, column=3)

        #Units of result
        self.resultUnit7= Label(self, text='m/s^2', fg="white", bg="black")
        self.resultUnit7.grid(row=13, column=4)
        self.resultUnit71= Label(self, text='m/s', fg="white", bg="black")
        self.resultUnit71.grid(row=14, column=4)



        #//////////////////////////////////////// Button ////////////////////////////////////////
        self.button= Button(self, text='Convert', command= self.Convert)
        self.button.grid(row=15, column= 0)

        
        #//////////////////////////////////////// Convert function ////////////////////////////////////////
    def Convert(self):
        #m/s to km/h
        try:
            a=float(self.ms.get())
            result=a*3600./1000
            self._result["text"]=str(result)
        except ValueError:
            self._result["text"]='Enter number!'
            pass
            
        
        #km/h to m/s
        try:
            b=float(self.km.get())
            result2=b *1000./3600
            self._result2["text"]= str(result2)
        except ValueError:
            self._result2["text"]='Enter number!!'
            pass
           
        #Kinetic Energy
        try:
            m215= float(self.kg.get())
            v215= float(self.ms2.get())
            result3=(m215 * v215 ** 2)*0.5
            self._result3["text"]= str(result3)
        except ValueError:
            self._result3["text"]='Enter number!'
            pass 
            
        #Potential Energy
        try:
            fg=self.kg2.get()
            gf=self.msx2.get()
            gg=self.m.get()
            result4= fg*gf*gg
            self._result4["text"]= str(result4)
        except ValueError:
            self._result4["text"]='Enter number!'
            pass

        #Escape Velocity
        try:
            check2= self.RoP.get()
            if check2 <> 0:
                M= float(self.MoP.get())
                r= float(self.RoP.get())
                result5= (6.67 * M / r)*0.5
                result51= (2 * 6.67 * M / r)*0.5
                self._result51["text"]= str(result51)
                self._result5["text"]= str(result5)
                self._error["text"]=''
            else:
                self._error2["text"]= '"Escape Velocity"- Division by zero!'
        except ValueError:
            self._result5["text"]='Enter number!'
            pass
            

            
        #Rotational Motion: m/s to rad/s
        try:
            check3= self.m2.get()
            if check3 <> 0:
                Vv= self.ms3.get()
                Rr= self.m2.get()
                result6= (Vv**2/Rr)
                result61= Vv/Rr
                self._result6["text"]=str(result6)
                self._result61["text"]= str(result61)
                self._error2["text"]=''
            else:
                self._error["text"]= '"Rotational Motion: m/s to rad/s"- Division by zero!'
        except ValueError:
            self._result6["text"]= 'Enter number!'
            self._result61["text"]= 'Enter number!'
            pass 
        #Rotational Motion: rad/s to m/s
        try:
            check4= self.m3.get()
            if check4 <> 0:
                vV= self.rads.get()
                rR= self.m3.get()
                result71= vV*rR
                result7= (vV**2/rR)
                self._result7["text"]= str(result7)
                self._result71["text"]= str(result71)
                self._error3["text"]=''
            else:
                self._error3["text"]= '"Rotational Motion: rad/s to m/s"- Division by zero!'
        except ValueError:
            self._result7["text"]='Enter number!'
            self._result71["text"]='Enter number!'
            pass   
        


def main():
    Conversion().mainloop()

main()
